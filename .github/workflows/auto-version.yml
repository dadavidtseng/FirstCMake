name: Auto Version

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  auto-tag:
    name: Auto Tag Version
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip version]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get-latest-tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "Latest tag: $latest_tag"

      - name: Determine version bump
        id: version-bump
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          
          if [[ $commit_message == *"[major]"* ]]; then
            bump_type="major"
          elif [[ $commit_message == *"[minor]"* ]] || [[ $commit_message == *"feat:"* ]]; then
            bump_type="minor"
          else
            bump_type="patch"
          fi
          
          echo "bump_type=$bump_type" >> $GITHUB_OUTPUT
          echo "Version bump type: $bump_type"

      - name: Calculate new version
        id: new-version
        run: |
          latest_tag="${{ steps.get-latest-tag.outputs.latest_tag }}"
          bump_type="${{ steps.version-bump.outputs.bump_type }}"
          
          # Remove 'v' prefix if present
          version=${latest_tag#v}
          
          # Split version into parts
          IFS='.' read -ra version_parts <<< "$version"
          major=${version_parts[0]:-0}
          minor=${version_parts[1]:-0}
          patch=${version_parts[2]:-0}
          
          # Bump version
          case $bump_type in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          new_version="v$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "New version: $new_version"

      - name: Check if tag exists
        id: check-tag
        run: |
          new_version="${{ steps.new-version.outputs.new_version }}"
          
          # Check if tag exists locally
          if git tag -l "$new_version" | grep -q "$new_version"; then
            echo "Tag $new_version exists locally"
            tag_exists="true"
          # Check if tag exists on remote
          elif git ls-remote --tags origin | grep -q "refs/tags/$new_version$"; then
            echo "Tag $new_version exists on remote"
            tag_exists="true"
          else
            echo "Tag $new_version does not exist"
            tag_exists="false"
          fi
          
          echo "tag_exists=$tag_exists" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_version="${{ steps.new-version.outputs.new_version }}"
          
          # Check if release already exists
          if gh release view "$new_version" >/dev/null 2>&1; then
            echo "Release $new_version already exists"
            release_exists="true"
          else
            echo "Release $new_version does not exist"
            release_exists="false"
          fi
          
          echo "release_exists=$release_exists" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: steps.check-tag.outputs.tag_exists == 'false' && steps.check-release.outputs.release_exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_version="${{ steps.new-version.outputs.new_version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create tag locally
          git tag -a "$new_version" -m "Release $new_version"
          
          # Push tag to remote
          git push origin "$new_version"
          
          echo "Successfully created and pushed tag: $new_version"

      - name: Skip tag creation
        if: steps.check-tag.outputs.tag_exists == 'true' || steps.check-release.outputs.release_exists == 'true'
        run: |
          new_version="${{ steps.new-version.outputs.new_version }}"
          if [[ "${{ steps.check-tag.outputs.tag_exists }}" == "true" ]]; then
            echo "⚠️ Tag $new_version already exists, skipping tag creation"
          fi
          if [[ "${{ steps.check-release.outputs.release_exists }}" == "true" ]]; then
            echo "⚠️ Release $new_version already exists, skipping tag creation"
          fi
          echo "This might happen if:"
          echo "  1. The workflow was re-run"
          echo "  2. The tag/release was created manually"
          echo "  3. Multiple commits triggered the same version"
          echo "  4. Concurrent workflow runs occurred"

      - name: Create release
        if: steps.check-tag.outputs.tag_exists == 'false' && steps.check-release.outputs.release_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.new-version.outputs.new_version }}
          name: Release ${{ steps.new-version.outputs.new_version }}
          body: |
            ## Changes in ${{ steps.new-version.outputs.new_version }}
            
            **Commit:** ${{ github.event.head_commit.message }}
            **SHA:** ${{ github.sha }}
            
            ### Download
            The build artifacts will be available shortly after the release builds complete.
            
            ### Installation
            Download the appropriate executable for your platform and run it directly.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip release creation
        if: steps.check-tag.outputs.tag_exists == 'true' || steps.check-release.outputs.release_exists == 'true'
        run: |
          new_version="${{ steps.new-version.outputs.new_version }}"
          echo "⚠️ Skipping release creation for existing tag/release: $new_version"